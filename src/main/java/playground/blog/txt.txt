package playground.blog.controller;

import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;
import playground.blog.dto.category.CategoryRequestDTO;
import playground.blog.dto.category.CategoryResponseDTO;
import playground.blog.service.CategoryService;

import java.util.List;

@RestController
@RequestMapping("/api/categories")
@RequiredArgsConstructor
public class CategoryController {
private final CategoryService categoryService;
@PostMapping
public CategoryResponseDTO createCategory( @RequestBody CategoryRequestDTO categoryRequestDTO){
    return categoryService.createCategory(categoryRequestDTO);
}
@GetMapping
public List<CategoryResponseDTO> getAllCategories(){
    return categoryService.getAllCategories();
}
@GetMapping("/{id}")
public CategoryResponseDTO getCategoryById(@PathVariable Long id){
    return categoryService.getCategoryById(id);
}
@GetMapping("/search")
public CategoryResponseDTO getCategoryByName(@RequestParam("name") String name){
    return categoryService.getCategoryByName(name);
}
@PutMapping("/{id}")
public CategoryResponseDTO updateCategory(@PathVariable Long id,@RequestBody CategoryRequestDTO categoryRequestDTO){
    return categoryService.updateCategory(id,categoryRequestDTO);
}
@DeleteMapping("/{id}")
public CategoryResponseDTO deleteCategory(@PathVariable Long id){
    return categoryService.deleteCategory(id);
}

}
package playground.blog.dto.category;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Builder
@Data
@AllArgsConstructor
@NoArgsConstructor
public class CategoryRequestDTO {
    String name;
    String description;
}

package playground.blog.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.beans.BeanProperty;
import java.sql.Timestamp;
import java.util.List;

@Entity
@Table(name = "categories")
@Data
@AllArgsConstructor
@NoArgsConstructor
@Builder
public class Category {
//=========== attributes ==============
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(unique = true, nullable = false)
    private Long id;
    @Column(name = "name", nullable = false, length = 50)
    private String name;
    @Column(name = "description", nullable = true)
    private String description;
    @Column(name = "created_at", nullable = false)
    private Timestamp createdAt;
    @Column(name = "updated_at", nullable = false)
    private Timestamp updatedAt;
//=========== relationships ===========

//=========== one to many =============
//=========== many to many ============
    @ManyToMany(fetch = FetchType.LAZY,cascade = {CascadeType.DETACH, CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH})
    @JoinTable(
        name= "categories_articles",
        joinColumns=@JoinColumn(name = "category_id"),
        inverseJoinColumns=@JoinColumn(name = "article_id")
    )
    @JsonIgnore
    private List<Article> articles;
//=========== many to ine =============
//=========== one to one ==============
@PrePersist
public void prePersist(){
    this.createdAt = new Timestamp(System.currentTimeMillis());
    this.updatedAt = new Timestamp(System.currentTimeMillis());
}
    @PreUpdate
    public void preUpdate(){
        this.updatedAt = new Timestamp(System.currentTimeMillis());
    }
}


package playground.blog.mapper.implementation;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;
import org.springframework.stereotype.Component;
import playground.blog.dto.category.CategoryRequestDTO;
import playground.blog.dto.category.CategoryResponseDTO;
import playground.blog.entity.Category;
import playground.blog.mapper.CategoryMapper;

@Builder
@AllArgsConstructor
@Component
public class CategoryMapperImpl implements CategoryMapper {
    @Override
    public  Category toEntity(CategoryRequestDTO categoryRequestDTO) {
      return   Category.builder()
                .description(categoryRequestDTO.getDescription())
                .name(categoryRequestDTO.getName())
                .build();
    }
    @Override
    public CategoryResponseDTO toResponse(Category category) {
        return CategoryResponseDTO.builder()
                .id(category.getId())
                .description(category.getDescription())
                .name(category.getName())
                .build();
    }

}

